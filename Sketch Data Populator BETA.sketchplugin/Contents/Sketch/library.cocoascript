//===============================================
// sketch data populator - library
//===============================================

var Library = {};
(function(self) {

	//array conversion
	self.jsArray = jsArray;

	//file system
	self.askForJSON = askForJSON;
    self.askForTableTSV = askForTableTSV;
    self.askForImage = askForImage;
    self.askForSVG = askForSVG;
	self.readFileAsText = readFileAsText;
    self.getPresetsDir = getPresetsDir;
    self.loadPresets = loadPresets;
    self.getImageFromURL = getImageFromURL;
    self.loadJSONData = loadJSONData;
    self.loadTableTSV = loadTableTSV;
    self.flattenTable = flattenTable;

	//layers
	self.findLayersInLayer = findLayersInLayer;
	self.findLayerInLayer = findLayerInLayer;
    self.findPageWithName = findPageWithName;
	self.resizeTextLayer = resizeTextLayer;
    self.refreshTextLayer = refreshTextLayer;
    self.getSelectedLayers = getSelectedLayers;
    self.restoreSelection = restoreSelection;
    self.createGrid = createGrid;

	//check layer type
    self.isSymbolInstance = isSymbolInstance;
	self.isLayerGroup = isLayerGroup;
    self.isLayerShapeGroup = isLayerShapeGroup;
	self.isLayerText = isLayerText;
    self.addPage = addPage;
    self.removePage = removePage;
    self.isArtboard = isArtboard;

	//other
	self.mergeStringWithValues = mergeStringWithValues;
    self.randomInteger = randomInteger;
    self.delay = delay;
    self.scaleToBoundingBox = scaleToBoundingBox;
    self.copyLayer = copyLayer;

    //ui elements
    self.createAlert = createAlert;
    self.createLabel = createLabel;
    self.createCheckbox = createCheckbox;
    self.createSelect = createSelect;
    self.createDataOptionsView = createDataOptionsView;
    self.createLayoutOptionsView = createLayoutOptionsView;
    

	//===============================================


	function jsArray(array) {
		var length = [array count];
        var jsArray = [];

        while (length--) {
            jsArray.push([array objectAtIndex: length]);
        }
        return jsArray;
	}


	function askForJSON(path) {
		var panel = [NSOpenPanel openPanel];

		[panel setTitle: "Select JSON"];
		[panel setMessage: "Please select the JSON file you'd like to use."];
		[panel setPrompt: "Select"];

		[panel setCanCreateDirectories: false];
  		[panel setCanChooseFiles: true];
  		[panel setCanChooseDirectories: false];
  		[panel setAllowsMultipleSelection: false];
  		[panel setShowsHiddenFiles: false];
  		[panel setExtensionHidden: false];

        if(path) {
            [panel setDirectoryURL: [NSURL fileURLWithPath: path]];
        }
        else {
            [panel setDirectoryURL: [NSURL fileURLWithPath: '/Users/' + NSUserName()]];
        }

  		var pressedButton = [panel runModal];
  		if(pressedButton == NSOKButton) {
  			return [[panel URL] path];
  		}
	}
    
    
    function askForTableTSV(path) {
        var panel = [NSOpenPanel openPanel];

        [panel setTitle: "Select TSV table"];
        [panel setMessage: "Please select the TSV table file you'd like to use."];
        [panel setPrompt: "Select"];

        [panel setCanCreateDirectories: false];
        [panel setCanChooseFiles: true];
        [panel setCanChooseDirectories: false];
        [panel setAllowsMultipleSelection: false];
        [panel setShowsHiddenFiles: false];
        [panel setExtensionHidden: false];

        if(path) {
            [panel setDirectoryURL: [NSURL fileURLWithPath: path]];
        }
        else {
            [panel setDirectoryURL: [NSURL fileURLWithPath: '/Users/' + NSUserName()]];
        }

        var pressedButton = [panel runModal];
        if(pressedButton == NSOKButton) {
            return [[panel URL] path];
        }
    }


    function askForImage(path) {
        var panel = [NSOpenPanel openPanel];

        [panel setTitle: "Select Image"];
        [panel setMessage: "Please select the image file you'd like to use."];
        [panel setPrompt: "Select"];

        [panel setCanCreateDirectories: false];
        [panel setCanChooseFiles: true];
        [panel setCanChooseDirectories: false];
        [panel setAllowsMultipleSelection: false];
        [panel setShowsHiddenFiles: false];
        [panel setExtensionHidden: false];

        if(path) {
            [panel setDirectoryURL: [NSURL fileURLWithPath: path]];
        }
        else {
            [panel setDirectoryURL: [NSURL fileURLWithPath: '/Users/' + NSUserName()]];
        }

        var pressedButton = [panel runModal];
        if(pressedButton == NSOKButton) {
            return [[panel URL] path];
        }
    }


    function askForSVG(path) {
        var panel = [NSOpenPanel openPanel];

        [panel setTitle: "Select SVG Icon"];
        [panel setMessage: "Please select the SVG file you'd like to use."];
        [panel setPrompt: "Select"];

        [panel setCanCreateDirectories: false];
        [panel setCanChooseFiles: true];
        [panel setCanChooseDirectories: false];
        [panel setAllowsMultipleSelection: false];
        [panel setShowsHiddenFiles: false];
        [panel setExtensionHidden: false];

        if(path) {
            [panel setDirectoryURL: [NSURL fileURLWithPath: path]];
        }
        else {
            [panel setDirectoryURL: [NSURL fileURLWithPath: '/Users/' + NSUserName()]];
        }

        var pressedButton = [panel runModal];
        if(pressedButton == NSOKButton) {
            return [[panel URL] path];
        }
    }


	function readFileAsText(path) {
        return [NSString stringWithContentsOfFile: path encoding: NSUTF8StringEncoding error: false];
    }


    function getPresetsDir() {

        //get script path
        var scriptPath = context.scriptPath;

        //get presets dir path
        var presetsDirPath = [scriptPath stringByAppendingPathComponent: '/../../../Presets/'];
        presetsDirPath = [presetsDirPath stringByStandardizingPath];

        return presetsDirPath;
    }


    function loadPresets() {

        //get presets path
        var presetsPath = getPresetsDir();

        //create file enumerator for presetsPath
        var url = [NSURL fileURLWithPath: presetsPath];
        var enumerator = [[NSFileManager defaultManager] enumeratorAtURL:url includingPropertiesForKeys:[NSURLIsDirectoryKey, NSURLNameKey, NSURLPathKey] options:NSDirectoryEnumerationSkipsHiddenFiles errorHandler: null];

        var presets = [];
        while(fileUrl = [enumerator nextObject]) {

            //make sure that file is JSON
            if([[fileUrl pathExtension] isEqualToString: 'json']) {

                //make sure it's a file
                var isDir = MOPointer.alloc().init();
                [fileUrl getResourceValue: isDir forKey: NSURLIsDirectoryKey error: null];
                if(!Number(isDir.value())) {
                    
                    //get relative path for preset
                    var presetPath = [fileUrl path];
                    var presetDisplayPath = [presetPath stringByReplacingOccurrencesOfString: presetsPath + '/' withString: ''];

                    //create preset structure
                    var preset = {
                        name: String([presetDisplayPath stringByDeletingPathExtension]),
                        path: String([fileUrl path])
                    };

                    //add item
                    presets.push(preset);
                }   
            } 
        }

        return presets;
    }
    
    
    function getImageFromURL(urlString) {
    
        //get data from url
        var url = NSURL.URLWithString(urlString);
        var data = [url resourceDataUsingCache:false];
        if(!data) return;

        //create image from data
        var image = [[NSImage alloc] initWithData:data];
        return image;
    }
    
    
    function loadJSONData(path) {

        //load contents
        var contents = readFileAsText(path);

        //get data from JSON
        var data;
        try {
            data = JSON.parse(contents);
        }
        catch(e) {
            context.document.showMessage("There was an error parsing data. Please make sure it's valid.");
            return;
        }

        return data;
    }

    
    function loadTableTSV(path) {
        
        //load contents
        var data = readFileAsText(path);
        
        //create 2d table array from tsv
        var table = [];

        //split into rows
        var rowsData = data.split(/\n/g);
        rowsData.forEach(function(rowData) {

            //prepare row
            var row = [];

            //split into columns
            var columnsData = rowData.split(/\t/g);
            columnsData.forEach(function(columnData) {
                columnData = columnData.replace('\r', '').trim();

                //add column to row
                row.push(columnData);
            });

            //add row to table
            table.push(row);
        });

        //find x and y indexes of table data start
        var dataX = 0;
        var dataY = 0;
        while (!table[0][dataX].length) {
            dataX++;
        }
        while (!table[dataY][0].length) {
            dataY++;
        }

        //get data width and height
        var dataWidth = table[0].length - dataX;
        var dataHeight = table.length - dataY;

        //fill missing vertical table group values
        for (var i = 0; i < dataX - 1; i++) {
            var lastPresentValue = null;
            for (var j = dataY; j < dataY + dataHeight; j++) {
                if (table[j][i].length) {
                    lastPresentValue = table[j][i];
                } else {
                    table[j][i] = lastPresentValue;
                }
            }
        }

        //fill missing horizontal table group values
        for (var i = 0; i < dataY; i++) {
            var lastPresentValue = null;
            for (var j = dataX; j < dataX + dataWidth; j++) {
                if (table[i][j].length) {
                    lastPresentValue = table[i][j];
                } else {
                    table[i][j] = lastPresentValue;
                }
            }
        }

        //create grouped table of horizontal entries
        var groupedTable = {
            rows: []
        };
        for (var i = dataY; i < dataY + dataHeight; i++) {
            for (var j = dataX; j < dataX + dataWidth; j++) {

                //get data for table cell
                var data = table[i][j];

                //get data key
                //data keys are always to the left of the data
                var dataKey = table[i][dataX - 1];

                //find path to data
                var path = [];
                for (var p = 0; p < dataX - 1; p++) {
                    path.push({
                        title: table[i][p],
                        type: 'row'
                    });
                }
                for (var p = 0; p < dataY; p++) {
                    path.push({
                        title: table[p][j],
                        type: 'column'
                    });
                }

                //create path structure
                var parent = groupedTable.rows;
                for (var p = 0; p < path.length; p++) {

                    //find existing child in parent with same title
                    var existingChild = null;
                    for (var q = 0; q < parent.length; q++) {
                        if (parent[q].title == path[p].title) {
                            existingChild = parent[q];
                            break;
                        }
                    }

                    //select next parent
                    if (existingChild) {
                        parent = existingChild[path[p].type + 's'];
                        if (!parent) parent = existingChild.content;
                    } else {

                        //prepare new child that will become next parent
                        var newChild = {
                            title: path[p].title
                        };

                        //if it's the last path component, the content is an object
                        if (p == path.length - 1) {
                            newChild.content = {};
                            parent.push(newChild);
                            parent = newChild.content;
                        } else {
                            newChild[path[p].type + 's'] = [];
                            parent.push(newChild);
                            parent = newChild[path[p].type + 's'];
                        }
                    }
                }

                //add value for key to parent
                parent[dataKey] = data;
            }
        }

        return groupedTable;
    }
    
    
    function flattenTable(data) {

        return {
            rowGroups: getRowGroups(data.rows[0]),
            columnGroups: getColumnGroups(data.rows[0]),
            cells: getCells(data)
        };
        
        
        function getCells(data) {
            
            var result = {
                columnsPerRow: 0
            };
            
            //get all cells
            var allCells = getAllCells(data, data, result);
            
            var rows = [];
            var currentRow = [];
            for(var i = 0; i < allCells.length; i++) {
                if(i % result.columnsPerRow == 0) {
                    currentRow = [];
                    rows.push(currentRow);
                }
                currentRow.push(allCells[i]);
            }
            
            return rows;
            
            
            function getAllCells(data, parent, result) {
                
                var allCells = [];
                
                if(data.rows && data.rows.length) {
                    for(var i = 0; i < data.rows.length; i++) {
                        var row = data.rows[i];
                        allCells = allCells.concat(getAllCells(row, data, result));
                    }
                }
                else if(data.columns && data.columns.length) {
                    for(var i = 0; i < data.columns.length; i++) {
                        var column = data.columns[i];
                        allCells = allCells.concat(getAllCells(column, data, result));
                    }
                }
                else if(data.content) {
                    
                    //extract cells here
                    allCells.push(data.content);
                    
                    //set columns per row
                    result.columnsPerRow = parent.columns.length;
                }
                
                return allCells;
            }
        }
        
        function getRowGroups(data) {
            var groups = [];
            if (data.rows && data.rows.length) {
                var group = {
                    title: data.title
                };
                groups.push(group);
                var subGroups = [];
                for(var i = 0; i < data.rows.length; i++) {
                    subGroups = subGroups.concat(getRowGroups(data.rows[i]));
                }
                if(subGroups.length) group.groups = subGroups;
            }
            return groups;
        }
        
        function getColumnGroups(data) {
            var groups = [];
            
            //drill down the rows
            while(data.rows) {
                data = data.rows[0];
            }
            
            if(data.columns && data.columns.length) {
                var group = {
                    title: data.title
                };
                groups.push(group);
                var subGroups = [];
                for(var i = 0; i < data.columns.length; i++) {
                    subGroups = subGroups.concat(getColumnGroups(data.columns[i]));
                }
                if(subGroups.length) group.groups = subGroups;
            }
            else if(data.content) {
                var group = {
                    title: data.title
                };
                groups.push(group);
            }

            return groups;
        }
    }


    function findLayersInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude) {

    	//create predicate format
    	var formatRules = ['(name != NULL)'];
    	var arguments = [];

    	//name
    	if(name) {
    		if(exactMatch) {
    			formatRules.push('(name == %@)');
    		}
    		else {
    			formatRules.push('(name like %@)');
    		}
    		arguments.push(name);
    	}

    	//type
    	if(type) {
    		formatRules.push('(className == %@)');
    		arguments.push(type);
    	}
    	else {
    		formatRules.push('(className == "MSLayerGroup" OR className == "MSShapeGroup" OR className == "MSArtboardGroup" OR className == "MSTextLayer")');
    	}

    	//layers to exclude
    	if(layersToExclude) {
    		formatRules.push('NOT (SELF IN %@)');
    		arguments.push(layersToExclude);
    	}

    	//prepare format string
    	var formatString = formatRules.join(' AND ');

    	//create predicate
        predicate = [NSPredicate predicateWithFormat: formatString argumentArray: arguments];

        //get layers to filter
        var layers;
        if (subLayersOnly) {
            layers = [rootLayer layers];
        } else {
            layers = [rootLayer children];
        }

        //perform query
        var queryResult = [layers filteredArrayUsingPredicate: predicate];

        //return result as js array
        return jsArray(queryResult);
    }


    function findLayerInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude) {
        var result = findLayersInLayer(name, exactMatch, type, rootLayer, subLayersOnly, layersToExclude);

        //return first layer in result
        if (result.length) return result[0];
    }


    function findPageWithName(name, fullMatch) {

        var doc = context.document;
        var pages = jsArray([doc pages]);
        for(var i = 0; i < pages.length; i++) {
            var currentPage = pages[i];

            //if page matches name
            if(fullMatch) {
                if([currentPage name] == name) {
                    return currentPage;
                }
            }
            else {
                if([currentPage name].indexOf(name) > -1) {
                return currentPage;
                }
            }
        }

        return;
    }


  	function resizeTextLayer(layer) {
  	    [layer adjustFrameToFit];
  	    [layer select: true byExpandingSelection: false];
  	    [layer setIsEditingText: true];
  	    [layer setIsEditingText: false];
  	    [layer select: false byExpandingSelection: false];
  	}


    function refreshTextLayer(layer) {
        [layer select: true byExpandingSelection: false];
        [layer setIsEditingText: true];
        [layer setIsEditingText: false];
        [layer select: false byExpandingSelection: false];
    }


    function getSelectedLayers() {

        var selectedLayers = [];
        if(context.selection.count() > 0) {
            selectedLayers = jsArray(context.selection);
        }

        return selectedLayers;
    }
    
    
    function restoreSelection() {

        //deselect current selection
        var doc = context.document;
        [[doc currentPage] deselectAllLayers];

        selection.forEach(function(layer) {
            [layer select:true byExpandingSelection:true];
        });
    }
    
    
    function createGrid(selectedLayers, opt) {
        
        //check rows count
        if(!opt.rowsCount || opt.rowsCount < 0) {
            context.document.showMessage('Number of grid rows must be at least 1.');
            return;
        }

        //check rows margin
        if(!opt.rowsMargin && opt.rowsMargin != 0) {
            context.document.showMessage('Grid row margin is invalid.');
            return;
        }

        //check column count
        if(!opt.columnsCount || opt.columnsCount < 0) {
            context.document.showMessage('Number of grid columns must be at least 1.');
            return;
        }

        //check columns margin
        if(!opt.columnsMargin && opt.columnsMargin != 0) {
            context.document.showMessage('Grid column margin is invalid.');
            return;
        }

        //get first layer (most top left)
        var layer = selectedLayers[0];
        var smallestX = selectedLayers[0].frame().x();
        var smallestY = selectedLayers[0].frame().y();
        for(var i = 0; i < selectedLayers.length; i++) {
            var tempLayer = selectedLayers[i];
            if(tempLayer.frame().x() < smallestX || tempLayer.frame().y() < smallestY) {
                smallestX = tempLayer.frame().x();
                smallestY = tempLayer.frame().y();
                layer = tempLayer;
            }
        }

        //arrange copies of the first layer
        var layerWidth = layer.frame().width();
        var layerHeight = layer.frame().height();
        var layerParent = [layer parentGroup];
        if(!layerParent) layerParent = [layer parentArtboard];
        if(!layerParent) layerParent = [layer parentPage];

        //remove selected layers from parent
        selectedLayers.forEach(function(tempLayer) {
            tempLayer.removeFromParent();
        });

        //keep track of original position
        var startX = layer.frame().x();
        var startY = layer.frame().y();

        //store new selected layers
        var newSelectedLayers = [];

        //create rows
        for(var i = 0; i < opt.rowsCount; i++) {

            //set row y
            var y = startY + (i * (layerHeight + opt.rowsMargin));

            //create columns
            for(var j = 0; j < opt.columnsCount; j++) {

                //create layer copy
                var copy = copyLayer(layer);

                //add to parent layer
                layerParent.addLayers([copy]);

                //add to selected layers
                newSelectedLayers.push(copy);

                //set column x
                var x = startX + (j * (layerWidth + opt.columnsMargin));

                //position copy
                copy.frame().setX(x);
                copy.frame().setY(y);
            }
        }

        return newSelectedLayers;
    }

    
    function isSymbolInstance(layer) {
        return ([layer isKindOfClass: [MSSymbolInstance class]]);
    }
    
    
    function isLayerGroup(layer) {
        return ([layer isKindOfClass: [MSLayerGroup class]] && ![layer isKindOfClass: [MSShapeGroup class]]);
    }


    function isLayerShapeGroup(layer) {
        return ([layer isKindOfClass: [MSShapeGroup class]]);
    }


    function isLayerText(layer) {
        return ([layer isKindOfClass: [MSTextLayer class]]);
    }

	function isArtboard(layer) {
		return ([layer isKindOfClass: [MSArtboardGroup class]]);
	}


    function addPage(name) {

        //get doc
        var doc = context.document;

        //get current page
        var currentPage = doc.currentPage();

        //create new page
        var page = doc.addBlankPage();
        page.setName(name);

        //make current page active again
        doc.setCurrentPage(currentPage);

        return page;
    }
    
    
    function removePage(page) {
        
        //get doc
        var doc = context.document;
            
        //get current page
        var currentPage = doc.currentPage();
        
        //remove page
        doc.removePage(page);
        
        //make current page active again
        doc.setCurrentPage(currentPage);
    }


	function mergeStringWithValues(string, values) {

		//get properties in values
	    var properties = Object.keys(values);

	    properties.forEach(function(property) {
            
            //escape regex
            var sanitisedProperty = property.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
            sanitisedProperty = '{' + sanitisedProperty + '}';
            
	        //build regex
	        var exp = RegExp(sanitisedProperty, 'g');

	        //replace instances of property placeholder with value
	        string = string.replace(exp, values[property]);
	    });

	    return string;
	}


    function randomInteger(min, max) {
        return Math.floor(Math.random() * (max - min)) + min;
    }


    function delay(callback, delay, opt) {
        [coscript setShouldKeepAround:true];
        var cosi = [coscript scheduleWithInterval:delay jsFunction:function(cinterval) {
              callback(opt); 
        }];
    }


    function scaleToBoundingBox(boundingFrame, contentFrame, roundPos) {

        //prepare final frame
        var finalFrame = {};

        //get ratio
        var boundingShortestSide = (boundingFrame.width < boundingFrame.height) ? boundingFrame.width : boundingFrame.height;
        var contentLongestSide = (contentFrame.width > contentFrame.height) ? contentFrame.width : contentFrame.height;
        var ratio = boundingShortestSide / contentLongestSide;

        //set final frame size
        finalFrame.width = contentFrame.width * ratio;
        finalFrame.height = contentFrame.height * ratio;

        //set final frame position
        finalFrame.x = boundingFrame.x + ((boundingFrame.width - finalFrame.width) / 2);
        finalFrame.y = boundingFrame.y + ((boundingFrame.height - finalFrame.height) / 2);
        
        //rounding
        if(roundPos) {
            finalFrame.x = Math.round(finalFrame.x);
            finalFrame.y = Math.round(finalFrame.y);
        }
        
        return finalFrame;
    }
    
    
    function copyLayer(layer) {

        //create duplicate
        var layerCopy = [layer duplicate];

        //remove duplicate from parent
        layerCopy.removeFromParent();

        return layerCopy;
    }


    function createLabel(text, fontSize, bold, frame) {

        var label = [[NSTextField alloc] initWithFrame:frame];
        [label setStringValue:text];
        
        //only set font if sketch version is not 3.4 (due to a problem with NSFont instance)
        if([[NSBundle mainBundle] objectForInfoDictionaryKey:"CFBundleShortVersionString"] != '3.4') {
            if(bold) {
                [label setFont:[NSFont boldSystemFontOfSize:fontSize]];
            }
            else {
                [label setFont:[NSFont systemFontOfSize:fontSize]];
            }
        }
        
        [label setBezeled:false];
        [label setDrawsBackground:false];
        [label setEditable:false];
        [label setSelectable:false];

        return label;
    }


    function createCheckbox(text, checked, frame) {

        checked = (checked == false) ? NSOffState : NSOnState;

        var checkbox = [[NSButton alloc] initWithFrame: frame];
        [checkbox setButtonType: NSSwitchButton];
        [checkbox setBezelStyle: 0];
        [checkbox setTitle: text];
        [checkbox setState: checked];

        return checkbox;
    }


    function createSelect(items, selectedIndex, frame) {

        var select = [[NSPopUpButton alloc] initWithFrame: frame pullsDown: false];
        [select addItemsWithTitles: items];
        [select selectItemAtIndex: selectedIndex];

        return select;
    }


    function createAlert(title, message, iconFileName) {

        var alert = [COSAlertWindow new];
        [alert setMessageText: title];
        [alert setInformativeText: message];

        if(iconFileName) {
            
            //get icon path
            var scriptPath = [NSString stringWithString: context.scriptPath];
            scriptPath = [scriptPath stringByDeletingLastPathComponent];
            var iconPath = [scriptPath stringByAppendingPathComponent: iconFileName];
            
            //set icon
            var icon = [[NSImage alloc] initByReferencingFile: iconPath];
            [alert setIcon: icon];
        }

        return alert;
    }
    
    
    function createDataOptionsView(opt) {

        //create options view
        var optionsView = [[NSView alloc] initWithFrame: NSMakeRect(0, 0, 300, 110)];

        //create options view title
        var optionsViewTitle = createLabel('Data options', 12, true, NSMakeRect(0, 90, 300, 20));
        [optionsView addSubview: optionsViewTitle];

        //create randomize checkbox
        var randomizeCheckbox = createCheckbox('Randomize data order', false, NSMakeRect(0, 65, 300, 20));
        [optionsView addSubview: randomizeCheckbox];  
        if(opt.noRandomize) {
            
            //set randomize checkbox state
            [randomizeCheckbox setState: false];
            [randomizeCheckbox setEnabled: false];
        }

        //create trim checkbox
        var trimCheckbox = createCheckbox('Trim overflowing text (fixed width text layers)', false, NSMakeRect(0, 45, 300, 20));
        [optionsView addSubview: trimCheckbox];

        //set trim checkbox state
        [trimCheckbox setState: [[NSUserDefaults standardUserDefaults] objectForKey:'trimText']];

        //create ellipsis checkbox
        var ellipsisCheckbox = createCheckbox('Insert ellipsis after trimmed text', false, NSMakeRect(0, 25, 300, 20));
        [optionsView addSubview: ellipsisCheckbox];

        //set ellipsis checkbox state
        [ellipsisCheckbox setState: [[NSUserDefaults standardUserDefaults] objectForKey:'insertEllipsis']];

        //create substitute label
        var substituteLabel = createLabel('Default substitute:', 12, false, NSMakeRect(0, 0, 110, 20));
        [optionsView addSubview: substituteLabel];

        //create substitute text field
        var substituteTextField = [[NSTextField alloc] initWithFrame:NSMakeRect(110, 0, 120, 22)];
        [optionsView addSubview: substituteTextField];

        //set substitute
        if([[NSUserDefaults standardUserDefaults] objectForKey:'defaultSubstitute']) {
            [substituteTextField setStringValue:[[NSUserDefaults standardUserDefaults] objectForKey:'defaultSubstitute']];
        }
        else {
            [substituteTextField setStringValue:''];
        }


        //return configured view
        return {
            view: optionsView,
            randomizeCheckbox: randomizeCheckbox,
            trimCheckbox: trimCheckbox,
            ellipsisCheckbox: ellipsisCheckbox,
            substituteTextField: substituteTextField
        };
    }


    function createLayoutOptionsView() {

        //create options view
        var optionsView = [[NSView alloc] initWithFrame: NSMakeRect(0, 0, 300, 104)];

        //create options view title
        var optionsViewTitle = createLabel('Layout options', 12, true, NSMakeRect(0, 84, 300, 20));
        [optionsView addSubview: optionsViewTitle];

        //create create grid checkbox
        var createGridCheckbox = createCheckbox('Create grid', false, NSMakeRect(0, 59, 300, 20));
        [optionsView addSubview: createGridCheckbox];

        //set randomize checkbox state
        [createGridCheckbox setState: [[NSUserDefaults standardUserDefaults] objectForKey:'createGrid']];



        //create rows count label
        var rowsCountLabel = createLabel('Rows:', 12, false, NSMakeRect(0, 27, 60, 20));
        [optionsView addSubview: rowsCountLabel];

        //create rows count text field
        var rowsCountTextField = [[NSTextField alloc] initWithFrame:NSMakeRect(60, 27, 70, 22)];
        [optionsView addSubview: rowsCountTextField];

        //set rows count
        if([[NSUserDefaults standardUserDefaults] objectForKey:'rowsCount']) {
            [rowsCountTextField setStringValue:[[NSUserDefaults standardUserDefaults] objectForKey:'rowsCount']];
        }
        else {
            [rowsCountTextField setStringValue:'1'];
        }


        //create rows margin label
        var rowsMarginLabel = createLabel('Margin:', 12, false, NSMakeRect(142, 27, 50, 20));
        [optionsView addSubview: rowsMarginLabel];

        //create rows margin text field
        var rowsMarginTextField = [[NSTextField alloc] initWithFrame:NSMakeRect(190, 27, 70, 22)];
        [optionsView addSubview: rowsMarginTextField];

        //set rows margin
        if([[NSUserDefaults standardUserDefaults] objectForKey:'rowsMargin']) {
            [rowsMarginTextField setStringValue:[[NSUserDefaults standardUserDefaults] objectForKey:'rowsMargin']];
        }
        else {
            [rowsMarginTextField setStringValue:'10'];
        }


        //create columns count label
        var columnsCountLabel = createLabel('Columns:', 12, false, NSMakeRect(0, 0, 60, 20));
        [optionsView addSubview: columnsCountLabel];

        //create columns count text field
        var columnsCountTextField = [[NSTextField alloc] initWithFrame:NSMakeRect(60, 0, 70, 22)];
        [optionsView addSubview: columnsCountTextField];

        //set columns count
        if([[NSUserDefaults standardUserDefaults] objectForKey:'columnsCount']) {
            [columnsCountTextField setStringValue:[[NSUserDefaults standardUserDefaults] objectForKey:'columnsCount']];
        }
        else {
            [columnsCountTextField setStringValue:'1'];
        }

        //create columns margin label
        var columnsMarginLabel = createLabel('Margin:', 12, false, NSMakeRect(142, 0, 50, 20));
        [optionsView addSubview: columnsMarginLabel];

        //create columns margin text field
        var columnsMarginTextField = [[NSTextField alloc] initWithFrame:NSMakeRect(190, 0, 70, 22)];
        [optionsView addSubview: columnsMarginTextField];


        //set columns margin
        if([[NSUserDefaults standardUserDefaults] objectForKey:'columnsMargin']) {
            [columnsMarginTextField setStringValue:[[NSUserDefaults standardUserDefaults] objectForKey:'columnsMargin']];
        }
        else {
            [columnsMarginTextField setStringValue:'10'];
        }

        //return configured view
        return {
            view: optionsView,
            createGridCheckbox: createGridCheckbox,
            rowsCountTextField: rowsCountTextField,
            rowsMarginTextField: rowsMarginTextField,
            columnsCountTextField: columnsCountTextField,
            columnsMarginTextField: columnsMarginTextField
        };
    }


})(Library);